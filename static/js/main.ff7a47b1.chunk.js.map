{"version":3,"sources":["components/singleCard.tsx","App.tsx","index.tsx"],"names":["SingleCard","card","flipped","handleChoice","className","src","alt","onClick","cardImages","App","useState","cards","setCards","turns","setTurns","choice1","setChoice1","choice2","setChoice2","shuffleCards","shuffledCards","i","length","randId","Math","floor","random","push","id","matched","sort","a","b","resetTurn","prevTurns","useEffect","prevCards","map","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAUMA,EAAa,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAIjC,OACI,sBAAKC,UAAWF,EAAU,yBAA2B,iBAArD,UACQ,qBAAKE,UAAU,kBAAf,SACI,qBAAKC,IAAKJ,EAAKI,IAAKC,IAAI,iBAE5B,qBAAKF,UAAU,iBAAf,SACI,qBACIC,IAAK,4BACLC,IAAI,YACJC,QAZA,WAChBJ,EAAaF,YCRfO,EAAa,CACjB,CAACH,IAAK,0BACN,CAACA,IAAK,0BACN,CAACA,IAAK,0BACN,CAACA,IAAK,0BACN,CAACA,IAAK,0BACN,CAACA,IAAK,2BAuGOI,MA9Ff,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,mBAAsB,MAHvC,mBAGNK,EAHM,KAGGC,EAHH,OAIiBN,mBAAsB,MAJvC,mBAINO,EAJM,KAIGC,EAJH,KAMPC,EAAe,WAGnB,IAFA,IAAMC,EAAgB,GAEbC,EAAI,EAAGA,EAAIb,EAAWc,OAAQD,IAAK,CAC1C,IAAIE,EAASC,KAAKC,MAAoB,IAAdD,KAAKE,UAC7BN,EAAcO,KAAd,2BACMnB,EAAWa,IADjB,IAEIO,GAAGL,EACHM,SAAS,KAGbN,EAASC,KAAKC,MAAoB,IAAdD,KAAKE,UACzBN,EAAcO,KAAd,2BACMnB,EAAWa,IADjB,IAEIO,GAAGL,EACHM,SAAQ,KAGZb,EAAW,MACXE,EAAW,MAGbN,EAASQ,EAAcU,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,GAAKI,EAAEJ,OAC/Cd,EAAS,IAGLX,EAAe,SAACF,GAChBc,GAAWE,IAEJF,EACTG,EAAWjB,GAEXe,EAAWf,KAITgC,EAAY,WAChBjB,EAAW,MACXE,EAAW,MACXJ,GAAS,SAAAoB,GAAS,OAAIA,EAAY,MA2BpC,OAxBAC,qBAAU,WACJpB,GAAWE,IACTF,EAAQV,MAAQY,EAAQZ,KAAOU,EAAQa,KAAOX,EAAQW,IACxDhB,GAAS,SAAAwB,GACP,OAAOA,EAAUC,KAAI,SAAApC,GACnB,OAAIA,EAAKI,MAAQU,EAAQV,IAChB,2BAAIJ,GAAX,IAAiB4B,SAAS,IAEnB5B,QAIbgC,KAEAK,YAAW,kBAAML,MAAa,QAGlC,CAAClB,EAASE,IAGZkB,qBAAU,WACRhB,MACC,IAGD,sBAAKf,UAAU,MAAf,UACE,+CAEA,qBAAKA,UAAW,YAAhB,SACE,qBAAKA,UAAU,YAAf,SACGO,EAAM0B,KAAI,SAAApC,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,EAENE,aAAcA,EACdD,QAASD,IAASc,GAAWd,IAASgB,GAAWhB,EAAK4B,SAFjD5B,EAAK2B,WAOlB,wBAAQrB,QAASY,EAAcf,UAAU,aAAzC,sBACCO,EAAMW,OAAS,GAAK,8BAAK,kDAAqBT,WCtGrD0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ff7a47b1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"../App\";\nimport './singleCard.css';\n\ninterface cardProps {\n    card: Card;\n    handleChoice: (card: Card) => void;\n    flipped: boolean;\n}\n\nconst SingleCard = ({ card, flipped, handleChoice }: cardProps) => {    \n    const handleClick = () => {\n        handleChoice(card);\n     }\n    return (\n        <div className={flipped ? \"flipped card-container\" : \"card-container\"}>\n                <div className='card card-front'>\n                    <img src={card.src} alt='card front' />\n                </div>\n                <div className='card card-back'>\n                    <img \n                        src={'/public/img/card-back.png'} \n                        alt='card back' \n                        onClick={handleClick}\n                    />\n                </div>\n\n        </div>\n    )\n} \n\nexport { SingleCard }","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { SingleCard } from './components/singleCard';\n\nconst cardImages = [\n  {src: '/public/img/card-1.png'},\n  {src: '/public/img/card-2.png'},\n  {src: '/public/img/card-3.png'},\n  {src: '/public/img/card-4.png'},\n  {src: '/public/img/card-5.png'},\n  {src: '/public/img/card-6.png'}\n]\n\nexport interface Card {\n  src: string;\n  id: number;\n  matched: boolean;\n}\n\nfunction App() {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [turns, setTurns] = useState(0);\n  const [choice1, setChoice1] = useState<Card | null>(null)\n  const [choice2, setChoice2] = useState<Card | null>(null)\n\n  const shuffleCards = () => {\n    const shuffledCards = [];\n    // for each of the six cards, duplicate it and add random ID's, then push to shuffledDeck\n    for (let i = 0; i < cardImages.length; i++) {\n      let randId = Math.floor(Math.random()*10000);\n      shuffledCards.push(\n        {...cardImages[i],\n          id:randId,\n          matched: false\n        }\n      );\n      randId = Math.floor(Math.random()*10000);\n      shuffledCards.push(\n        {...cardImages[i],\n          id:randId,\n          matched:false\n        }\n      );\n      setChoice1(null);\n      setChoice2(null);\n    };\n\n    setCards(shuffledCards.sort((a, b) => a.id - b.id));\n    setTurns(0);\n  };\n\n  const handleChoice = (card: Card) => {\n    if (choice1 && choice2) {\n      return;\n    } else if (choice1) {\n      setChoice2(card)\n    } else {\n      setChoice1(card);\n    }\n  }\n\n  const resetTurn = () => {\n    setChoice1(null);\n    setChoice2(null);\n    setTurns(prevTurns => prevTurns + 1);\n  }\n\n  useEffect(() => {\n    if (choice1 && choice2 ) {\n      if (choice1.src === choice2.src && choice1.id !== choice2.id) {\n        setCards(prevCards => { \n          return prevCards.map(card => {\n            if (card.src === choice1.src) {\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  },[choice1, choice2])\n\n\n  useEffect(() => {\n    shuffleCards();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Treasure Hunt</h1>\n\n      <div className={'container'}>\n        <div className=\"card-grid\" >\n          {cards.map(card => \n            <SingleCard\n              card={card}\n              key={card.id}\n              handleChoice={handleChoice}\n              flipped={card === choice1 || card === choice2 || card.matched}\n              />\n          )}\n        </div>\n      </div>\n      <button onClick={shuffleCards} className='new-button'>New Game</button>\n      {cards.length > 0 && <div><p>Number of turns: {turns}</p></div>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}